# shellcheck shell=bash

export BASH_CONF='bashrc'

export BASH_SILENCE_DEPRECATION_WARNING=1

case "$-" in
  *i*) (>&2 echo 'bashrc sourced in interactive shell') ;;
  *)	 (>&2 echo 'bashrc sourced in noninteractive shell') ;;
esac

export HOMEBREW_PREFIX="/usr/local"
if [ "$(uname -p)" == 'arm' ]; then
  export HOMEBREW_PREFIX="/opt/homebrew"
fi

export HOMEBREW_CELLAR="${HOMEBREW_PREFIX}/Cellar"
export HOMEBREW_REPOSITORY="${HOMEBREW_PREFIX}/Homebrew"
export HOMEBREW_BIN="${HOMEBREW_PREFIX}/bin"
export HOMEBREW_SBIN="${HOMEBREW_PREFIX}/sbin"
PATH="${HOMEBREW_BIN}:${HOMEBREW_SBIN}${PATH+:$PATH}"
export MANPATH="${HOMEBREW_PREFIX}/share/man${MANPATH+:$MANPATH}:"
export INFOPATH="${HOMEBREW_PREFIX}/share/info:${INFOPATH:-}"

export HOMEBREW_NO_AUTO_UPDATE=1
export HOMEBREW_NO_INSTALL_UPGRADE=1
export HOMEBREW_NO_INSTALL_CLEANUP=1
export HOMEBREW_NO_ANALYTICS=1

if type brew &>/dev/null; then
  if [ -r "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh" ]; then
    # shellcheck disable=SC1091
    . "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh"
  else
    for completion in "${HOMEBREW_PREFIX}/etc/bash_completion.d/"*; do
      # shellcheck disable=SC1090
      [ -r "$completion" ] && . "$completion"
    done
  fi
fi

# Jetbrains Toolbox App
PATH="${PATH}:${HOME}/Library/Application Support/JetBrains/Toolbox/scripts"

# 1password
export SSH_AUTH_SOCK="${HOME}/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock"

export XDG_CONFIG_HOME="$HOME/.config"

# shellcheck disable=SC1091
. "${XDG_CONFIG_HOME}/op/plugins.sh"

# set limits per session just in case
ulimit -n 65536
ulimit -u 2048

export LANG=en_US.UTF-8
export LC_ALL=$LANG

export JAVA_VERSION=23.0.2

# mac built-in java
# export JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Home

export JAVA_HOME
JAVA_HOME="$(/usr/libexec/java_home)"

# # for a specific java version
# JAVA_HOME="$(/usr/libexec/java_home -v 1.8.0_101)"

# go install golang.org/dl/go1.23.5@latest
# go1.23.5 download

[ -z "${GOVERSION:-}" ] && export GOVERSION=go1.24.3
export GOHOME="${HOME}/go"
export GOSDK="${HOME}/sdk"
export GO="${GOSDK}/${GOVERSION}/bin/go"
export GOFMT="${GOSDK}/${GOVERSION}/bin/gofmt"
export GOROOT="${GOSDK}/${GOVERSION}"

export PATH="${GOROOT}/bin:${GOHOME}/bin:${HOMEBREW_PREFIX}/opt/go/libexec/bin:${PATH}"

export OpenCV_DIR="${HOMEBREW_PREFIX}/Cellar/opencv/2.4.9"

export EDITOR='nvim'

export GITHUB_TOKEN
GITHUB_TOKEN="$(tr -d '\n' < "$HOME/.github-personal-access-token")"
export HOMEBREW_GITHUB_API_TOKEN="$GITHUB_TOKEN"

# colorize the Terminal
export CLICOLOR=1;

stty stop undef

export CC=/usr/bin/clang
export CXX=/usr/bin/clang++

# direnv
eval "$(direnv hook bash)"

alias sbp='. ${HOME}/.bash_profile'
alias sbrc='. ${HOME}/.bashrc'
alias ll='ls -al'
alias cs='printf "\033c"'
# shellcheck disable=SC2142 # these aren't positional params
alias mkt="make -qp | awk -F':' '/^[a-zA-Z0-9][^\$\#\\/\\t=]*:([^=]|$)/ {split(\$1,A,/ /);for(i in A)print A[i]}' | sort -u"
alias sort-ips="sort -t . -k 3,3n -k 4,4n"
alias review='rg -A 3 "(FIX|NOTE|BUG|REVIEW|TODO|HACK|OPTIMIZE):?\s+"'
alias tg-clean='find . \( \( -type d -name ".terragrunt-cache" \) -or \( -type f -name "terragrunt-debug.tfvars.json" \) \) -exec rm -rf "{}" \+ -print'
alias tf-clean='find . -type d -name ".terraform" -exec rm -rf "{}" \+ -print'
alias tflock-clean='find . -type f -name ".terraform.lock.hcl" -exec rm -rf "{}" \+ -print'

# git
if [ -f "${HOMEBREW_PREFIX}/etc/bash_completion.d/git-prompt.sh" ]; then
  # shellcheck disable=SC1091
  . "${HOMEBREW_PREFIX}/etc/bash_completion.d/git-prompt.sh"
  PS1='[\u@\h \W$(__git_ps1 " (%s)")]\$ '
fi

# check out all remote branches
# git branch -a | grep -v HEAD | perl -ne 'chomp($_); s|^\*?\s*||; if (m|(.+)/(.+)| && not $d{$2}) {print qq(git branch --track $2 $1/$2\n)} else {$d{$_}=1}' | csh -xfs

alias gst='git status'
alias gsts='git status -s'
_comp_gst() {
  local __git_cmd_idx=0
  _git_status
} && __git_complete gst _comp_gst \
  && __git_complete gsts _comp_gst
alias gdf='git diff'
__git_complete gdf _git_diff
alias gdfw='git diff --ws-error-highlight=all'
__git_complete gdfw _git_diff
alias gdfc='git diff --cached'
__git_complete gdfc _git_diff
alias gdfcw='git diff --cached --ws-error-highlight=all'
__git_complete gdfcw _git_diff
alias gf='git fetch'
__git_complete gf _git_fetch
alias gpul='git pull'
__git_complete gpul _git_pull
alias gpsh='git push'
__git_complete gpsh _git_push
alias gpshh='git push -u origin HEAD'
__git_complete gpshh _git_push
alias gfp='git fetch && git pull'
alias grv='git remote -v'
alias gaa='git add .'
__git_complete gaa _git_add
alias ga='git add'
alias gau='git add -u'
_comp_ga() {
  local __git_cmd_idx=0
  _git_add
} && __git_complete ga _comp_ga \
  && __git_complete gau _comp_ga
alias gl='git log'
__git_complete gl _git_log
alias glp='git log -p'
__git_complete glp _git_log
alias gc='git commit'
__git_complete gc _git_commit
alias gcm='git commit -m'
__git_complete gcm _git_commit
alias gco='git checkout'
alias gcob='git checkout -b'
## https://github.com/scop/bash-completion/issues/545
# __git_complete gco _git_checkout
_comp_gco() {
  local __git_cmd_idx=0
  _git_checkout
} && __git_complete gco _comp_gco \
  && __git_complete gcob _comp_gco
alias gmrg='git merge'
__git_complete gmrg _git_merge
alias gbr='git branch'
_comp_gbr() {
  local __git_cmd_idx=0
  _git_branch
} && __git_complete gbr _comp_gbr
alias grb='git rebase'
__git_complete grb _git_rebase
alias grst='git reset'
__git_complete grst _git_reset
alias gsth='git stash'
__git_complete gsth _git_stash

export PAGER=less
export LESS="-NiSR"
# shellcheck disable=SC2139 # we want this to expand when defined
alias less="less ${LESS}"

complete -C aws_completer aws

export AWS_PAGER=

export HISTFILESIZE=9999999
export HISTSIZE=9999999

# no duplicate entries
export HISTCONTROL=ignoredups:erasedups:ignorespace

# append to history, don't overwrite it
shopt -s histappend
export PROMPT_COMMAND="history -a; $PROMPT_COMMAND"

GCP_SDK_HOME="/opt/google/google-cloud-sdk"
PATH="${PATH}:${GCP_SDK_HOME}/bin"

# The next line updates PATH for the Google Cloud SDK.
# shellcheck disable=SC1091
[ -f "${GCP_SDK_HOME}/path.bash.inc" ] && . "${GCP_SDK_HOME}/path.bash.inc"

# The next line enables shell command completion for gcloud.
# shellcheck disable=SC1091
[ -f "${GCP_SDK_HOME}/completion.bash.inc" ] && . "${GCP_SDK_HOME}/completion.bash.inc"

gcloud_docker () {
  local key credpath entrypoint entrypointpath
  key="$1"
  credpath=/root/credentials.json
  entrypoint="$(mktemp)"
  entrypointpath=/root/entrypoint.sh
  cat > "$entrypoint" <<'EOF'
#!/bin/bash
set -o errexit
set -o xtrace
gcloud auth activate-service-account --key-file=/root/credentials.json
exec "$@"
EOF
  chmod 711 "$entrypoint"
  touch "${HOME}/.gcloud-docker-bash_history"
  chmod 600 "${HOME}/.gcloud-docker-bash_history"
  docker run -it --rm -w "/root" \
    -v "${HOME}/.gcloud-docker-bash_history:/root/.bash_history" \
    -v "${HOME}/.ssh:/root/.ssh:ro" \
    -v "${key}:${credpath}:ro" \
    -v "${entrypoint}:${entrypointpath}:ro" \
    --entrypoint "$entrypointpath" google/cloud-sdk /bin/bash
}

# rancher desktop
if [ -d "${HOME}/.rd/bin/docker" ]; then
  PATH="${HOME}/.rd/bin:${PATH}"
fi

# docker desktop
if [ -d "${HOME}/.docker/bin" ]; then
  PATH="${HOME}/.docker/bin:${PATH}"
fi

# kubernetes
if type kubectl &>/dev/null; then
  # shellcheck disable=SC1090
  source <(kubectl completion bash)
fi

# helm
export HELM_HOME="${HOME}/.helm"

# tmux
tmux_colors() {
  for i in {0..255}; do
    printf "\x1b[38;5;%smcolour%s\x1b[0m\n" "$i" "$i"
  done
}
alias tmux-colors=tmux_colors

_tma() {
  local -r tmux_sessions="$(tmux ls -F '#S' | xargs)"
  mapfile -t COMPREPLY < <(compgen -W "$tmux_sessions" -- "${COMP_WORDS[COMP_CWORD]}")
}
tma() {
  tmux attach -t "$1"
}
complete -F _tma tma
alias tmls='tmux ls'

alias sha1sum="shasum"
alias sha256sum="shasum -a 256"
alias sha512sum="shasum -a 512"
alias diff-favorite="diff --color=always --exclude=.git -r -W 250 -y --suppress-common-lines"

# tmpfile=$( mktemp -t transferXXX ); if tty -s; then basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g'); curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> $tmpfile; else curl --progress-bar --upload-file "-" "https://transfer.sh/$1" >> $tmpfile ; fi; cat $tmpfile; printf "\n"; rm -f $tmpfile; }

complete -C "${HOME}/bin/terraform" terraform
alias tf=terraform
complete -C "${HOME}/bin/terraform" tf

complete -C "${HOME}/bin/terragrunt" terragrunt
alias tg=terragrunt
complete -C "${HOME}/bin/terragrunt" tg

alias ssh-no-config-or-agent="ssh -F /dev/null -o IdentityAgent=none -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
alias scp-no-config-or-agent="scp -F /dev/null -o IdentityAgent=none -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
alias ssh-force-password="ssh -o PreferredAuthentications=password -o PubkeyAuthentication=no"
alias scp-force-password="scp -o PreferredAuthentications=password -o PubkeyAuthentication=no"
alias gh="PAGER= gh"

export ANSIBLE_NOCOWS=1

export DOTNET_CLI_TELEMETRY_OPTOUT=1

export VAGRANT_DEFAULT_PROVIDER=virtualbox

## krew bin
if type krew &>/dev/null; then
  PATH="${PATH}:${HOME}/.krew/bin"
fi

## temp bin
PATH="/opt/bin:${PATH}"

## vim iced
# PATH=${PATH}:${HOME}/.janus/vim-iced/bin

# Postgres.app
PG_APP_BIN_PATH="/Applications/Postgres.app/Contents/Versions/latest/bin"
[ -d "$PG_APP_BIN_PATH" ] && PATH="/Applications/Postgres.app/Contents/Versions/latest/bin:${PATH}"

export NVM_DIR="$HOME/.nvm"
# this loads nvm
# shellcheck disable=SC1091
[ -s "${HOMEBREW_PREFIX}/opt/nvm/nvm.sh" ] && . "${HOMEBREW_PREFIX}/opt/nvm/nvm.sh"
# this loads nvm bash_completion
# shellcheck disable=SC1091
[ -s "${HOMEBREW_PREFIX}/opt/nvm/etc/bash_completion.d/nvm" ] && . "${HOMEBREW_PREFIX}/opt/nvm/etc/bash_completion.d/nvm"

if [ -f "${HOME}/.profile-work/bashrc" ]; then
  export PROFILE=work
  # shellcheck disable=SC1091
  source "${HOME}/.profile-work/bashrc"
# TODO: fix this
# else
#   export HOMEBREW_GITHUB_API_TOKEN="$(cat $HOME/.github-personal-access-token | tr -d '\n')"
#   export GITHUB_TOKEN="$(cat $HOME/.github-personal-access-token | tr -d '\n')"
fi

# export PYTHONPATH=$(brew --prefix)/lib/python2.7/site-packages
# export PYTHONPATH=$(brew --prefix)/lib/python3.6/site-packages
# export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python
alias python=/usr/bin/python3
export PYTHONSTARTUP="${HOME}/.pythonrc.py"
export PYENV_ROOT="${HOME}/.pyenv"

if command -v pyenv 1>/dev/null 2>&1; then
  PATH="${PYENV_ROOT}/bin:${PATH}"
  eval "$(pyenv init -)"
fi

if [ -f "${HOMEBREW_PREFIX}/opt/gnu-getopt/bin/getopt" ]; then
  PATH="${HOMEBREW_PREFIX}/opt/gnu-getopt/bin:${PATH}"
fi

## clean the PATH
clean_path() {
  if [ -n "$PATH" ]; then
    old_PATH=$PATH:
    new_PATH=

    while [ -n "$old_PATH" ]; do
      entry=${old_PATH%%:*}    # the first remaining entry

      if [ -z "${entry:-}" ]; then
        # empty entry, skip it
        old_PATH=${old_PATH#*:}
        continue
      fi

      case $new_PATH: in
        *:"$entry":* | "$entry":* | *:"$entry") ;; # already there
        *) new_PATH=$new_PATH:$entry ;; # not there yet
      esac

      old_PATH=${old_PATH#*:}
    done

    export PATH=${new_PATH#:}
    unset  old_PATH new_PATH entry
  fi
}

# Tinty isn't able to apply environment variables to your shell due to
# the way shell sub-processes work. This is a work around by running
# Tinty through a function and then executing the shell scripts.
tinty_source_shell_theme() {
  newer_file=$(mktemp)
  tinty "$@"
  subcommand="$1"

  if [ "$subcommand" = "apply" ] || [ "$subcommand" = "init" ]; then
    tinty_data_dir="${XDG_DATA_HOME:-$HOME/.local/share}/tinted-theming/tinty"

    find "$tinty_data_dir" -maxdepth 1 -type f -name "*.sh" -newer "$newer_file" -print

    while read -r script; do
      # shellcheck disable=SC1090
      . "$script"
    done < <(find "$tinty_data_dir" -maxdepth 1 -type f -name "*.sh" -newer "$newer_file")

    unset tinty_data_dir
  fi

  unset subcommand
}

if [ -n "$(command -v 'tinty')" ] && ! alias tinty >/dev/null 2>&1; then
  tinty_source_shell_theme "init" > /dev/null

  alias tinty=tinty_source_shell_theme
fi

pth() {
  echo "$PATH" | tr ':' '\n' | xargs -I'{}' printf '\- {}\n'
}

clean_path

# make sure home bin is first
export PATH="${HOME}/bin:${PATH}"

# ex: ts=2 sw=2 et filetype=sh

