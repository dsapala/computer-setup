# ex: ts=2 sw=2 et filetype=sh

export BASH_SILENCE_DEPRECATION_WARNING=1

if [ "$(uname -p)" == 'arm' ]; then
  export HOMEBREW_PREFIX="/opt/homebrew";
elif [ "$(uname -p)" == 'i386' ]; then
  export HOMEBREW_PREFIX="/opt/local";
fi

export HOMEBREW_CELLAR="${HOMEBREW_PREFIX}/Cellar";
export HOMEBREW_REPOSITORY="${HOMEBREW_PREFIX}/Homebrew";
export PATH="${HOMEBREW_PREFIX}/bin:${HOMEBREW_PREFIX}/sbin${PATH+:$PATH}";
export MANPATH="${HOMEBREW_PREFIX}/share/man${MANPATH+:$MANPATH}:";
export INFOPATH="${HOMEBREW_PREFIX}/share/info:${INFOPATH:-}";

export HOMEBREW_NO_AUTO_UPDATE=1
export HOMEBREW_NO_INSTALL_UPGRADE=1
export HOMEBREW_NO_INSTALL_CLEANUP=1
export HOMEBREW_NO_ANALYTICS=1

if type brew &>/dev/null; then
  if [[ -r "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh" ]]; then
    . "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh"
  else
    for COMPLETION in "${HOMEBREW_PREFIX}/etc/bash_completion.d/"*; do
      [[ -r "$COMPLETION" ]] && . "$COMPLETION"
    done
  fi
fi

# 1password
export SSH_AUTH_SOCK="${HOME}/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock"

# shellcheck disable=SC1091
. "${HOME}/.config/op/plugins.sh"

# for compatibility with tmux since the new (@2) bash completion script
# won't re-source when tmux opens
# for COMPLETION in "${HOMEBREW_PREFIX}/etc/bash_completion.d/"*; do
#   [[ -r "$COMPLETION" ]] && source "$COMPLETION"
# done

# set limits per session just in case
ulimit -n 65536
ulimit -u 2048

export LANG=en_US.UTF-8
export LC_ALL=$LANG

export TERM='xterm-256color'

export XDG_CONFIG_HOME="$HOME/.config"

# mac built-in java
# export JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Home

# current oracle java
#export JAVA_HOME="$(/usr/libexec/java_home)"

# specific oracle java version
# export JAVA_HOME="$(/usr/libexec/java_home -v 1.8.0_101)"
# export JAVA_HOME="$(/usr/libexec/java_home -v 1.8.0_291)"
# export JAVA_HOME="$(/usr/libexec/java_home -v 1.7.0_80)"
# export JAVA_HOME="$(/usr/libexec/java_home -v 10.0.1)"
# export JAVA_HOME="$(/usr/libexec/java_home -v 12.0.2)"
# export JAVA_HOME="$(/usr/libexec/java_home -v 13.0.2)"
# export JAVA_HOME="$(/usr/libexec/java_home -v 16.0.1)"

# export NODE_PATH=/usr/local/lib/node
# export NODEJS_BIN=/usr/local/share/npm/bin
export ANT_HOME=/usr/share/ant/
export MAVEN_HOME=/usr/share/maven/

export GOPATH="$HOME/go"

export PATH="$PATH:$NODEJS_BIN:$(brew --prefix)/opt/go/libexec/bin:$GOPATH/bin"

### Added by the Heroku Toolbelt
# export PATH="/usr/local/heroku/bin:$PATH"

export JBOSS_HOME=$(brew --prefix)/opt/wildfly-as/libexec
export PATH=${PATH}:${JBOSS_HOME}/bin

# export PATH=/Applications/MAMP/Library/bin:/Applications/MAMP/bin:$PATH

export GROOVY_HOME="$(brew --prefix)/opt/groovy/libexec"
export GRIFFON_HOME="$(brew --prefix)/Cellar/griffon/1.1.0/libexec"
export GRAILS_HOME="$(brew --prefix)/opt/grails/libexec"
export CATALINA_HOME="$(brew --prefix)/Cellar/tomcat/7.0.42/libexec"

export OpenCV_DIR="$(brew --prefix)/Cellar/opencv/2.4.9"

export EDITOR='vim'

export COFFEELINT_CONFIG=~/.coffeelint-config.json

export rvmsudo_secure_path=0

export HOMEBREW_GITHUB_API_TOKEN="$(cat $HOME/.github-personal-access-token | tr -d '\n')"
export GITHUB_TOKEN="$(cat $HOME/.github-personal-access-token | tr -d '\n')"
export OCTOKIT_ACCESS_TOKEN="${GITHUB_TOKEN}"

# export POW_DOMAINS='dev'

# colorize the Terminal
export CLICOLOR=1;

stty stop undef

export CC=/usr/bin/clang
export CXX=/usr/bin/clang++

# direnv
eval "$(direnv hook bash)"

alias sb='source ~/.bashrc'
alias ll='ls -al'
alias cs='printf "\033c"'
alias mkt="make -qp | awk -F':' '/^[a-zA-Z0-9][^\$\#\\/\\t=]*:([^=]|$)/ {split(\$1,A,/ /);for(i in A)print A[i]}' | sort -u"
alias sort-ips="sort -t . -k 3,3n -k 4,4n"
alias review='rg -A 3 "(FIX|NOTE|BUG|REVIEW|TODO|HACK|OPTIMIZE):?\s+"'

# git
if [ -f "$(brew --prefix)/etc/bash_completion.d/git-prompt.sh" ]; then
  . "$(brew --prefix)/etc/bash_completion.d/git-prompt.sh"
  PS1='[\u@\h \W$(__git_ps1 " (%s)")]\$ '
fi

# checkout all remote branches
# git branch -a | grep -v HEAD | perl -ne 'chomp($_); s|^\*?\s*||; if (m|(.+)/(.+)| && not $d{$2}) {print qq(git branch --track $2 $1/$2\n)} else {$d{$_}=1}' | csh -xfs

alias gst='git status'
alias gsts='git status -s'
_comp_gst() {
  local __git_cmd_idx=0
  _git_status
} && __git_complete gst _comp_gst \
  && __git_complete gsts _comp_gst
alias gdf='git diff'
__git_complete gdf _git_diff
alias gdfw='git diff --ws-error-highlight=all'
__git_complete gdfw _git_diff
alias gdfc='git diff --cached'
__git_complete gdfc _git_diff
alias gdfcw='git diff --cached --ws-error-highlight=all'
__git_complete gdfcw _git_diff
alias gf='git fetch'
__git_complete gf _git_fetch
alias gpul='git pull'
__git_complete gpul _git_pull
alias gpsh='git push'
__git_complete gpsh _git_push
alias gpshh='git push -u origin HEAD'
__git_complete gpshh _git_push
alias gfp='git fetch && git pull'
alias grv='git remote -v'
alias gaa='git add .'
__git_complete gaa _git_add
alias ga='git add'
alias gau='git add -u'
_comp_ga() {
  local __git_cmd_idx=0
  _git_add
} && __git_complete ga _comp_ga \
  && __git_complete gau _comp_ga
alias gl='git log'
__git_complete gl _git_log
alias glp='git log -p'
__git_complete glp _git_log
alias gc='git commit'
__git_complete gc _git_commit
alias gcm='git commit -m'
__git_complete gcm _git_commit
alias gco='git checkout'
alias gcob='git checkout -b'
## https://github.com/scop/bash-completion/issues/545
# __git_complete gco _git_checkout
_comp_gco() {
  local __git_cmd_idx=0
  _git_checkout
} && __git_complete gco _comp_gco \
  && __git_complete gcob _comp_gco
alias gmrg='git merge'
__git_complete gmrg _git_merge
alias gbr='git branch'
_comp_gbr() {
  local __git_cmd_idx=0
  _git_branch
} && __git_complete gbr _comp_gbr
alias grb='git rebase'
__git_complete grb _git_rebase
alias grst='git reset'
__git_complete grst _git_reset
alias gsth='git stash'
__git_complete gsth _git_stash

export PAGER=less
export LESS="-NiSR"
alias less="less ${LESS}"

complete -C aws_completer aws

export AWS_PAGER=

export AWS_PAGER=
export MONO_GAC_PREFIX="/usr/local"

export HISTFILESIZE=9999999
export HISTSIZE=9999999
# no duplicate entries
export HISTCONTROL=ignoredups:erasedups:ignorespace
# append to history, don't overwrite it
shopt -s histappend
export PROMPT_COMMAND="history -a; $PROMPT_COMMAND"

export PATH=$PATH:/opt/google/google-cloud-sdk/bin

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/opt/google/google-cloud-sdk/path.bash.inc' ]; then . '/opt/google/google-cloud-sdk/path.bash.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/opt/google/google-cloud-sdk/completion.bash.inc' ]; then . '/opt/google/google-cloud-sdk/completion.bash.inc'; fi

gcloud_docker () {
  local key="${1}"
  local credpath=/root/credentials.json
  local entrypoint=$(mktemp)
  local entrypointpath=/root/entrypoint.sh
  cat <<'EOF' > ${entrypoint}
#!/bin/bash
set -o errexit
set -o xtrace
gcloud auth activate-service-account --key-file=/root/credentials.json
exec "$@"
EOF
  chmod 711 ${entrypoint}
  touch ${HOME}/.gcloud-docker-bash_history
  chmod 600 ${HOME}/.gcloud-docker-bash_history
  docker run -it --rm -w "/root" \
    -v ${HOME}/.gcloud-docker-bash_history:/root/.bash_history \
    -v ${HOME}/.ssh:/root/.ssh:ro \
    -v ${key}:${credpath}:ro \
    -v ${entrypoint}:${entrypointpath}:ro \
    --entrypoint ${entrypointpath} google/cloud-sdk /bin/bash
}

# rancher desktop
if [ -f "${HOME}/.rd/bin/docker" ]; then
  export PATH="${HOME}/.rd/bin:${PATH}"
fi

# docker desktop
if [ -f "${HOME}/.docker/bin" ]; then
  export PATH="${HOME}/.docker/bin:$PATH"
fi

# kubernetes
source <(kubectl completion bash)

# helm
export HELM_HOME=$HOME/.helm

# tmux
tmux_colors() {
  for i in {0..255}; do
    printf "\x1b[38;5;${i}mcolour${i}\x1b[0m\n";
  done
}

alias tmux-colors=tmux_colors

_tma() {
  tmux_sessions="$(tmux ls -F '#S' | xargs)"

  local cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=( $(compgen -W "$tmux_sessions" -- "$cur") )
}
complete -F _tma tma
alias tma='tmux attach -t $1'
alias tmls='tmux ls'

alias sha1sum="shasum"
alias sha256sum="shasum -a 256"
alias sha512sum="shasum -a 512"
alias diff-favorite="diff --color --exclude=.git -r -W 250 -y --suppress-common-lines"

# tmpfile=$( mktemp -t transferXXX ); if tty -s; then basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g'); curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> $tmpfile; else curl --progress-bar --upload-file "-" "https://transfer.sh/$1" >> $tmpfile ; fi; cat $tmpfile; printf "\n"; rm -f $tmpfile; }

# source /usr/local/bin/virtualenvwrapper.sh

complete -C "${HOME}/bin/terraform" terraform
alias tf=terraform
complete -C "${HOME}/bin/terraform" tf
alias ssh-no-config-or-agent="ssh -F /dev/null -o IdentityAgent=none -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
alias scp-no-config-or-agent="scp -F /dev/null -o IdentityAgent=none -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
alias ssh-force-password="ssh -o PreferredAuthentications=password -o PubkeyAuthentication=no"
alias scp-force-password="scp -o PreferredAuthentications=password -o PubkeyAuthentication=no"
alias gh="PAGER= gh"

export ANSIBLE_NOCOWS=1

export DOTNET_CLI_TELEMETRY_OPTOUT=1

export VAGRANT_DEFAULT_PROVIDER=virtualbox

## krew bin
export PATH="${PATH}:${HOME}/.krew/bin"

## temp bin
export PATH="/opt/bin:$PATH"

## vim iced
# export PATH=$PATH:${HOME}/.janus/vim-iced/bin

# Postgres.app
export PATH="/Applications/Postgres.app/Contents/Versions/latest/bin:$PATH"

if [ -f "${HOME}/.profile-work/bashrc" ]; then
  export PROFILE=work
  source "${HOME}/.profile-work/bashrc"
fi

## clean the PATH
clean_path() {
  if [ -n "$PATH" ]; then
    old_PATH=$PATH:
    PATH=
    while [ -n "$old_PATH" ]; do
      x=${old_PATH%%:*}    # the first remaining entry
      case $PATH: in
        *:"$x":*) ;;       # already there
        *) PATH=$PATH:$x;; # not there yet
      esac
      old_PATH=${old_PATH#*:}
    done
    export PATH=${PATH#:}
    unset old_PATH x
  fi
}

clean_path

# BEGIN_KITTY_SHELL_INTEGRATION
if test -n "$KITTY_INSTALLATION_DIR" -a -e "$KITTY_INSTALLATION_DIR/shell-integration/bash/kitty.bash"; then source "$KITTY_INSTALLATION_DIR/shell-integration/bash/kitty.bash"; fi
# END_KITTY_SHELL_INTEGRATION

# export PYTHONPATH=$(brew --prefix)/lib/python2.7/site-packages
# export PYTHONPATH=$(brew --prefix)/lib/python3.6/site-packages
# export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python
alias python=/usr/bin/python3
export PYTHONSTARTUP=$HOME/.pythonrc.py
export PYENV_ROOT=$HOME/.pyenv

if command -v pyenv 1>/dev/null 2>&1; then
  export PATH="${PYENV_ROOT}/bin:$PATH"
  eval "$(pyenv init -)"
fi

export NVM_DIR="$HOME/.nvm"
[ -s "${HOMEBREW_PREFIX}/opt/nvm/nvm.sh" ] && . "${HOMEBREW_PREFIX}/opt/nvm/nvm.sh"  # This loads nvm
[ -s "${HOMEBREW_PREFIX}/opt/nvm/etc/bash_completion.d/nvm" ] && . "${HOMEBREW_PREFIX}/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

# make sure home bin is first
export PATH="${HOME}/bin:$PATH"

