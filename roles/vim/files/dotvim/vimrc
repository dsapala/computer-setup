" vim, not vi
set nocompatible

if filereadable(expand("$HOME/.vim/autoload/plug.vim"))
  call plug#begin('~/.vim/plugged')

  Plug 'AndrewRadev/linediff.vim'
  Plug 'MarcWeber/vim-addon-mw-utils'
  Plug 'airblade/vim-gitgutter'
  Plug 'chriskempson/base16-vim'
  Plug 'ctrlpvim/ctrlp.vim'
  Plug 'easymotion/vim-easymotion', { 'tag': 'v3.0.1' }
  Plug 'ervandew/supertab'
  Plug 'fatih/vim-go'
  Plug 'garbas/vim-snipmate'
  Plug 'glts/vim-magnum'
  Plug 'glts/vim-radical'
  Plug 'godlygeek/tabular'
  Plug 'guns/vim-clojure-static'
  Plug 'hashivim/vim-terraform'
  Plug 'honza/vim-snippets'
  Plug 'iberianpig/tig-explorer.vim'
  Plug 'itchyny/lightline.vim'
  Plug 'jeetsukumaran/vim-buffergator'
  Plug 'jpalardy/vim-slime', { 'branch': 'main' }
  Plug 'junegunn/gv.vim'
  Plug 'luochen1990/rainbow'
  Plug 'martinda/Jenkinsfile-vim-syntax'
  Plug 'mg979/vim-visual-multi'
  Plug 'michaeljsmith/vim-indent-object'
  Plug 'preservim/nerdtree'
  Plug 'preservim/tagbar'
  Plug 'sjl/gundo.vim'
  Plug 'thinca/vim-visualstar'
  Plug 'tomtom/tcomment_vim'
  Plug 'tomtom/tlib_vim'
  Plug 'tpope/vim-classpath'
  Plug 'tpope/vim-dispatch', { 'tag': 'v1.8' }
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-eunuch'
  Plug 'tpope/vim-fireplace'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-obsession'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-unimpaired'
  Plug 'vim-scripts/closetag.vim', { 'tag': '0.9.1' }
  Plug 'vim-scripts/paredit.vim'
  Plug 'vim-syntastic/syntastic'
  Plug 'wesQ3/vim-windowswap'
  Plug 'chrisbra/NrrwRgn'

  "Plug 'sheerun/vim-polyglot'

  if executable("ack-grep") || executable("ack") || executable("ag") || executable("rg")
    Plug 'mileszs/ack.vim'

    " descending order of happiness
    if executable("rg")
      let g:ackprg="rg --vimgrep --smart-case"
    elseif executable("ag")
      let g:ackprg="ag --vimgrep --nocolor --nogroup --column"
    elseif executable("ack")
      let g:ackprg="ack -H --nocolor --nogroup --column"
    elseif executable("ack-grep")
      let g:ackprg="ack-grep -H --nocolor --nogroup --column"
    endif
  endif

  call plug#end()
end

set encoding=utf-8
set termencoding=utf-8

" this section mostly stolen from https://github.com/tpope/vim-sensible
" included here since I work on servers and can't always load plugins
if has('autocmd')
  filetype plugin indent on

  augroup ObsessionGroup
    autocmd!
    autocmd VimEnter * nested
      \ if !argc() && empty(v:this_session) && !&modified|
      \   if filereadable('Session.vim') |
      \     source Session.vim |
      \   else |
      \     Obsession |
      \   endif |
      \ endif
  augroup END
endif

if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif

set autoindent " copy indent from current line when starting a new line
set backspace=indent,eol,start " allow backspacing over everything in insert mode
set smarttab " a <Tab> in front of a line inserts blanks according to 'shiftwidth'

set complete-=i " it can make completion lag

set nrformats-=octal " no octals for incrementing

if !has('nvim') && &ttimeoutlen == -1
  set ttimeout        " time out for key codes
  set ttimeoutlen=100 " wait up to 100ms after Esc for special key
endif

" do incremental searching when it's possible to timeout
if has('reltime')
  set incsearch
endif

" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
endif

set ruler " show cursor position all the time
set wildmenu " enhanced command line completion.
set wildmode=list:longest " complete files like a shell.

if !&scrolloff
  set scrolloff=5
endif
if !&sidescrolloff
  set sidescrolloff=5
endif
if has("display")
  set display=truncate " show @@@ in the last line if it is truncated
end

if v:version > 703 || v:version == 703 && has("patch541")
  set formatoptions+=j " Delete comment character when joining commented lines
endif

if has('path_extra')
  setglobal tags-=./tags tags-=./tags; tags^=./tags; " prevent duplicate entry in tags
endif

set autoread

if &history < 1000
  set history=1000 " lots of command line history
endif

if &tabpagemax < 50
  set tabpagemax=50
endif

if !empty(&viminfo)
  set viminfo^=! " don't override blank viminfo file
endif

set sessionoptions-=options " don't include local options
set viewoptions-=options " don't include local options

if &t_Co == 8 && $TERM !~# '^Eterm'
  set t_Co=16 " allow color schemes to do bright colors without forcing bold
endif

" Switch syntax highlighting on when the terminal has colors or when using the
" GUI (which always has colors).
if &t_Co > 2 || has("gui_running")
  " Revert with ":syntax off".
  syntax on

  " I like highlighting strings inside C comments.
  " Revert with ":unlet c_comment_strings".
  let c_comment_strings=1
endif

if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim " load matchit.vim, but only if the user hasn't installed a newer version
endif

" break undo before delete word
if empty(mapcheck('<C-U>', 'i'))
  inoremap <C-U> <C-G>u<C-U>
endif
if empty(mapcheck('<C-W>', 'i'))
  inoremap <C-W> <C-G>u<C-W>
endif

" set number of colors
" if !has('gui_running')
"   set t_Co=256
" endif

" In many terminal emulators the mouse works just fine.  By enabling it you
" can position the cursor, Visually select and scroll with the mouse.
" Only xterm can grab the mouse events when using the shift key, for other
" terminals use ":", select text and press Esc.
if has('mouse')
  if &term =~ 'xterm'
    set mouse=a
  else
    set mouse=nvi
  endif
endif

" Put these in an autocmd group, so that you can revert them with:
" ":augroup vimStartup | au! | augroup END"
augroup vimStartup
  au!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid, when inside an event handler
  " (happens when dropping a file on gvim) and for a commit message (it's
  " likely a different one than last time).
  autocmd BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
    \ |   exe "normal! g`\""
    \ | endif
augroup END

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
" Revert with: ":delcommand DiffOrig".
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
      \ | wincmd p | diffthis
endif

if has('langmap') && exists('+langremap')
  " Prevent that the langmap option applies to characters that result from a
  " mapping.  If set (default), this may break plugins (but it's backward
  " compatible).
  set nolangremap
endif

colorscheme industry " set a default colorscheme

if exists('$BASE16_THEME')
      \ && (!exists('g:colors_name') || g:colors_name != 'base16-$BASE16_THEME')
  let base16colorspace=256
  colorscheme base16-$BASE16_THEME
endif

let s:uname = system("uname")
if has("gui_running")
  if s:uname == "Darwin\n"
    set guifont=Droid\ Sans\ Mono\ for\ Powerline:h12
  endif
endif

if s:uname == "Darwin\n"
  " use pasteboard on mac
  set clipboard=unnamed
endif

nnoremap <SPACE> <Nop>
let mapleader = " "

" map jk to escape key
"ino kj <Esc>

" set lower updatetime
set updatetime=100

" turns off visual bell
set vb

" toggle paste mode on and off with F3
set pastetoggle=<F3>

" disable paste mode when leaving insert mode
au InsertLeave * set nopaste

" don't make me save files before switching
set hidden

" display incomplete commands
set showcmd

" never wrap when opening
set nowrap

set tabstop=2 " a tab is two spaces
set shiftwidth=2 " an autoindent (with <<) is two spaces
set expandtab " use spaces, not tabs

" Disable output and VCS files
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem

" Disable archive files
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz

" Disable temp and backup files
set wildignore+=*.swp,*~,._*

" backup and swap files
if has("vms")
  set nobackup    " do not keep a backup file, use versions instead
else
  set backup    " keep a backup file (restore to previous version)
  if has('persistent_undo')
    set undofile  " keep an undo file (undo changes after closing)
  endif
endif

if isdirectory($HOME . '/.vim/_backup') == 0
  :silent !mkdir -p ~/.vim/_backup > /dev/null 2>&1
endif
set backupdir^=~/.vim/_backup//    " where to put backup files.

if isdirectory($HOME . '/.vim/_temp') == 0
  :silent !mkdir -p ~/.vim/_temp > /dev/null 2>&1
endif
set directory^=~/.vim/_temp//      " where to put swap files.

" allow undo after exiting
if exists("+undofile")
  " undofile - This allows you to use undos after exiting and restarting
  " This, like swap and backups, uses .vim-undo first, then ~/.vim/undo
  " :help undo-persistence
  " This is only present in 7.3+
  if isdirectory($HOME . '/.vim/_undo') == 0
    :silent !mkdir -p ~/.vim/_undo > /dev/null 2>&1
  endif
  set undodir=./.vim-undo//
  set undodir+=~/.vim/_undo//
  set undofile
endif

" set up statusline
if has("statusline") && !&cp
  set laststatus=2  " always show the status bar

  " Start the status line
  set statusline=%f\ %m\ %r
  set statusline+=Line:%l/%L[%p%%]
  set statusline+=\ Col:%v
  set statusline+=\ Buf:#%n
  set statusline+=\ [%b][0x%B]
endif

" relative line numbers on
set rnu

" line numbers on by default
set nu

" toggle line numbers on
no <Leader>non :set nu<CR> :set rnu<CR>
" and off
no <Leader>nof :set nu!<CR> :set rnu!<CR>

" toggle non-printable chars on and off
nn <Leader>lt :set list!<CR>
" a tab should display as "▸",
" end of line should be displayed as "¬"
set listchars=tab:▸\ ,eol:¬
" trailing whitespace as "."
set listchars+=trail:.
" the character to show in the last column when wrap is
" off and the line continues beyond the right of the screen
set listchars+=extends:»
" the character to show in the first column when wrap is
" off and the line continues beyond the left of the screen
set listchars+=precedes:«
" visualize nbsp chars
set listchars+=nbsp:♦
" turn non-printable chars off to begin with
set nolist

" <Ctrl-l> redraws the screen and removes any search highlighting.
" nnoremap <silent> <C-l> :nohl<CR><C-l>

" use sane regexes
nn / /\v
vn / /\v
nn ? ?\v
vn ? ?\v

" always show gutter
if has("signcolumn")
  set signcolumn=yes
end

" TComment toggle
map <Leader>/ :TComment<CR>

" From http://vimcasts.org/episodes/tidying-whitespace/
" Preserves/Saves the state, executes a command, and returns to the saved state
" Modified from http://vimbits.com/bits/231
" Remove trailing whitespace on save
function! Preserve(command)
  " Save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

" Execute clear whitespace on save
"autocmd BufWritePre * :call Preserve("%s/\\s\\+$//e")
map <Leader>st :call Preserve("%s/\\s\\+$//e")<CR>

" show trailing whitespace as red
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" highlight unprintables
let g:huc = 0
fun! HightlightUnprintableChars()
  if g:huc == 0
    let g:huc = 1
    hi clear SpecialKey
    hi link SpecialKey Error
  else
    let g:huc = 0
    hi clear SpecialKey
    call SetBase16Colorscheme()
  endif

  redraw
endfun

nm <Leader>hu :call HightlightUnprintableChars()<CR>

" searching
hi IncSearch guifg=#ffffff guibg=#00d700 gui=bold,underline
hi IncSearch ctermfg=255 ctermbg=40 cterm=bold,underline
hi Search guifg=#ffffff guibg=#0087ff gui=none
hi Search ctermfg=255 ctermbg=33 cterm=none

hi Visual guifg=#ffffff guibg=#8abeb7 gui=none
hi Visual ctermfg=255 ctermbg=14 gui=none

set hlsearch    " highlight matches
set incsearch   " incremental searching
set ignorecase  " searches are case insensitive...
set smartcase   " ... unless they contain at least one capital letter

" do incremental searching when it's possible to timeout
if has('reltime')
  set incsearch
endif

" don't highlight search by default
nohlsearch

" refresh all open buffers
fun! RefreshAll()
  set noconfirm
  bufdo e!
  set confirm
  echo 'refreshed all files'
endfun

nm <Leader>ra :call RefreshAll()<CR>

" disable paste mode when leaving insert mode
au InsertLeave * set nopaste

" 80 char column line
if exists('+colorcolumn')
  highlight ColorColumn ctermbg=235 guibg=#2c2d27
  let &colorcolumn="80,".join(range(120,999),",")
endif
" au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)

" toggle select all
map <Leader>a ggVG

" map the arrow keys to be based on display lines, not physical lines
map <Down> gj
map <Up> gk

" adjust viewports to the same size
map <Leader>= <C-w>=

" set shell
"set shell=/usr/local/bin/bash\ -il
"set shell=/bin/bash\ -il

" file-specific
au FileType python setl ts=4 sw=4 et
au FileType make setl ts=4 sw=4 noet
au BufRead,BufNewFile *.twig set filetype=mustache
au BufRead,BufNewFile *.twig syntax on
au BufRead,BufNewFile *.php syntax on
au BufRead,BufNewFile *.py.schema set filetype=yaml
au BufRead,BufNewFile *.hcl set filetype=terraform | normal zR
au BufRead,BufNewFile *.hcl normal zR
au BufRead,BufNewFile *.nomad set filetype=terraform | normal zR
au BufRead,BufNewFile *.nomad normal zR
au BufRead,BufNewFile */.ssh/config* set filetype=sshconfig

let g:clojure_align_multiline_strings = 0
let g:clojure_fuzzy_indent = 1
" let g:clojure_fuzzy_indent_patterns = ['with', 'def', 'let']
let g:clojure_fuzzy_indent_patterns = "with.*,def.*,let.*,send.*"
let g:clojure_fuzzy_indent_patterns .= ",cli.*" " Clojure core
let g:clojure_fuzzy_indent_patterns .= ",GET,POST,PUT,PATCH,DELETE,context" " Compojure
let g:clojure_fuzzy_indent_patterns .= ",clone-for" " Enlive
let g:clojure_fuzzy_indent_patterns .= ",select.*,insert.*,update.*,delete.*,with.*" " Korma
let g:clojure_fuzzy_indent_patterns .= ",fact,facts,fact-group" " Midje
let g:clojure_fuzzy_indent_patterns .= ",up,down,table" " Lobos
let g:clojure_fuzzy_indent_patterns .= ",when-eiligible,with-eligible-values,url-of-form"
let g:clojure_fuzzy_indent_patterns .= ",go-loop" " core.async

" ruby
" convert :one => 1 to one: 1
nm <Leader>rh :%s/\v\:(\w+)\s*\=\>/\1:/gc<CR>

" man pages
runtime! ftplugin/man.vim

" open dir of current buffer
map <Leader>od :!open %:p:h<CR>

cno <C-a>  <Home>
cno <C-e>  <End>
cno <C-b>  <Left>
cno <C-f>  <Right>
cno <C-d>  <Delete>
cno <M-b>  <S-Left>
cno <M-f>  <S-Right>
cno <M-d>  <S-right><Delete>

ino <C-a>  <Home>
ino <C-e>  <End>
ino <C-b>  <Left>
ino <C-f>  <Right>
ino <C-d>  <Delete>
ino <M-b>  <S-Left>
ino <M-f>  <S-Right>
ino <M-d>  <S-right><Delete>

nm <Leader>tt :set expandtab tabstop=4 shiftwidth=4 softtabstop=4<CR>
nm <Leader>tT :set expandtab tabstop=8 shiftwidth=8 softtabstop=4<CR>
nm <Leader>tM :set noexpandtab tabstop=8 softtabstop=4 shiftwidth=4<CR>
nm <Leader>tm :set expandtab tabstop=2 shiftwidth=2 softtabstop=2<CR>

" :nm ,js :%!python -c 'import json, sys; print("\n".join([json.dumps(json.loads(_.strip()), indent=2) for _ in sys.stdin.readlines()]))'<CR>
" nm <Leader>js :% !js-beautify %<CR>
" nm <Leader>js :% !bb -i '(-> (json/parse-string (apply str *input*)) (json/generate-string {:pretty true}) println)' %<CR>
nm <silent> <Leader>js :% !bb -i '(-> (json/parse-string (apply str *input*)) (json/generate-string {:pretty (json/create-pretty-printer (assoc json/default-pretty-print-options :indent-arrays? true :object-field-value-separator ": "))}) println)' %<CR>

" set path+=/usr/local/Cellar/emscripten/1.37.10/system/include/libcxx
" set path+=/usr/local/Cellar/emscripten/1.37.10/system/include/libc
" set path+=/usr/local/Cellar/emscripten/1.37.10/system/include/emscripten

" make Y behave like other capital letters
nno Y y$

" join without moving cursor position
nno J mzJ`z

" search and focus cursor to middle of screen
nno n nzzzv
nno N Nzzzv

" intelligent undo
ino . .<c-g>u
ino , ,<c-g>u
ino ! !<c-g>u
ino ? ?<c-g>u

" intelligent jumping
nno <expr> k (v:count > 5 ? "m'" . v:count : "") . 'k'
nno <expr> j (v:count > 5 ? "m'" . v:count : "") . 'j'

" return to last position
" autocmd BufReadPost *
"   \ if line("'\"") > 0 && line("'\"") <= line("$") |
"   \   exe "normal! g`\"" |
"   \ endif

" only insert one space after a '.', '?' and '!' with a join command
set nojoinspaces

" always show tabline
set showtabline=2

" save readonly file with sudo tee
cmap w!! w !sudo tee > /dev/null %

" format the entire file
nnoremap <leader>fef :normal! gg=G``<CR>

" upper/lower word
nmap <leader>u mQviwU`Q
nmap <leader>l mQviwu`Q

" upper/lower first char of word
nmap <leader>U mQgewvU`Q
nmap <leader>L mQgewvu`Q

" cd to the directory containing the file in the buffer
nmap <silent> <leader>cd :lcd %:h<CR>

" Create the directory containing the file in the buffer
nmap <silent> <leader>md :!mkdir -p %:p:h<CR>

" Some helpers to edit mode
" http://vimcasts.org/e/14
nmap <leader>ew :e <C-R>=expand('%:h').'/'<cr>
nmap <leader>es :sp <C-R>=expand('%:h').'/'<cr>
nmap <leader>ev :vsp <C-R>=expand('%:h').'/'<cr>
nmap <leader>et :tabe <C-R>=expand('%:h').'/'<cr>

" Swap two words
nmap <silent> gw :s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR>`'

" Underline the current line with '='
nmap <silent> <leader>ul :t.<CR>Vr=

" set text wrapping toggles
nmap <silent> <leader>tw :set invwrap<CR>:set wrap?<CR>

" find merge conflict markers
nmap <silent> <leader>fc <ESC>/\v^[<=>]{7}( .*\|$)<CR>

" Map the arrow keys to be based on display lines, not physical lines
map <Down> gj
map <Up> gk

" Toggle hlsearch with <leader>hs
nmap <leader>hs :set hlsearch! hlsearch?<CR>

" Adjust viewports to the same size
map <Leader>= <C-w>=

if has("gui_macvim") && has("gui_running")
  " Map command-[ and command-] to indenting or outdenting
  " while keeping the original selection in visual mode
  vmap <D-]> >gv
  vmap <D-[> <gv

  nmap <D-]> >>
  nmap <D-[> <<

  omap <D-]> >>
  omap <D-[> <<

  imap <D-]> <Esc>>>i
  imap <D-[> <Esc><<i

  " Bubble single lines
  nmap <D-Up> [e
  nmap <D-Down> ]e
  nmap <D-k> [e
  nmap <D-j> ]e

  " Bubble multiple lines
  vmap <D-Up> [egv
  vmap <D-Down> ]egv
  vmap <D-k> [egv
  vmap <D-j> ]egv

  " Map Command-# to switch tabs
  map  <D-0> 0gt
  imap <D-0> <Esc>0gt
  map  <D-1> 1gt
  imap <D-1> <Esc>1gt
  map  <D-2> 2gt
  imap <D-2> <Esc>2gt
  map  <D-3> 3gt
  imap <D-3> <Esc>3gt
  map  <D-4> 4gt
  imap <D-4> <Esc>4gt
  map  <D-5> 5gt
  imap <D-5> <Esc>5gt
  map  <D-6> 6gt
  imap <D-6> <Esc>6gt
  map  <D-7> 7gt
  imap <D-7> <Esc>7gt
  map  <D-8> 8gt
  imap <D-8> <Esc>8gt
  map  <D-9> 9gt
  imap <D-9> <Esc>9gt
else
  " Map command-[ and command-] to indenting or outdenting
  " while keeping the original selection in visual mode
  vmap <A-]> >gv
  vmap <A-[> <gv

  nmap <A-]> >>
  nmap <A-[> <<

  omap <A-]> >>
  omap <A-[> <<

  imap <A-]> <Esc>>>i
  imap <A-[> <Esc><<i

  " Bubble single lines
  nmap <C-Up> [e
  nmap <C-Down> ]e
  nmap <C-k> [e
  nmap <C-j> ]e

  " Bubble multiple lines
  vmap <C-Up> [egv
  vmap <C-Down> ]egv
  vmap <C-k> [egv
  vmap <C-j> ]egv

  " Make shift-insert work like in Xterm
  map <S-Insert> <MiddleMouse>
  map! <S-Insert> <MiddleMouse>

  " Map Control-# to switch tabs
  map  <C-0> 0gt
  imap <C-0> <Esc>0gt
  map  <C-1> 1gt
  imap <C-1> <Esc>1gt
  map  <C-2> 2gt
  imap <C-2> <Esc>2gt
  map  <C-3> 3gt
  imap <C-3> <Esc>3gt
  map  <C-4> 4gt
  imap <C-4> <Esc>4gt
  map  <C-5> 5gt
  imap <C-5> <Esc>5gt
  map  <C-6> 6gt
  imap <C-6> <Esc>6gt
  map  <C-7> 7gt
  imap <C-7> <Esc>7gt
  map  <C-8> 8gt
  imap <C-8> <Esc>8gt
  map  <C-9> 9gt
  imap <C-9> <Esc>9gt
endif

""
"" Command-Line Mappings
""

" After whitespace, insert the current directory into a command-line path
cnoremap <expr> <C-P> getcmdline()[getcmdpos()-2] ==# ' ' ? expand('%:p:h') : "\<C-P>"

if &diff
  map <leader>dgl :diffget LOCAL<CR>
  map <leader>dgb :diffget BASE<CR>
  map <leader>dgr :diffget REMOTE<CR>
endif

